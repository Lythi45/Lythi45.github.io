<!doctype html>
<html lang="en">
	<head>
		<title>Fire</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link rel="stylesheet" type="text/css" href="./fire_files/style_no_stats.css">
		<style type="text/css">
			body {
				background:#0a0a0a;
			}
		</style>
	</head>

	<body>

		<script src="./fire_files/Three.js"></script>

		<script type="text/javascript" src="./fire_files/RequestAnimationFrame.js"></script>
		<script type="text/javascript" src="./fire_files/THREEx.WindowResize.js"></script>
		<script type="text/javascript" src="./fire_files/info.js"></script>

		<script type="x-shader/x-vertex" id="vertexshader">

			attribute float size;
			attribute float time;
			attribute vec3 customColor;
			uniform float globalTime;

			varying vec3 vColor;
			varying float fAlpha;

			void main() {

				vColor = customColor;

				vec3 pos = position; 

				// time
				float localTime = time + globalTime;
				float modTime = mod( localTime, 1.0 );
				float accTime = modTime * modTime;

				// animation
				float angle = accTime * 40.0;
				vec2 pulse = vec2( sin( angle ) * 20.0, cos( angle ) * 20.0 );
				vec3 animated = vec3( pos.x * accTime + pulse.x, pos.y * accTime + pulse.y, pos.z * accTime*1.75 );
				fAlpha = (1.0-modTime)*2.0;

				vec4 mvPosition = modelViewMatrix * vec4( animated, 1 );

				gl_PointSize = min(100.0, (accTime*75.0) * ( 150.0 / length( mvPosition.xyz ) ) );

				gl_Position = projectionMatrix * mvPosition;

			}

		</script>

		<script type="x-shader/x-fragment" id="fragmentshader">

			uniform vec3 color;
			uniform sampler2D texture;

			varying vec3 vColor;
			varying float fAlpha;

			void main() {

				gl_FragColor = vec4( color * vColor, fAlpha );
				gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord );

			}

		</script>

		<script>

			var container;

			var camera, scene, renderer;

			var has_gl = false;

			var delta
			var time;
			var oldTime;

			var particles;

			init();
			animate();

			function init() {

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				scene = new THREE.Scene();

				camera = new THREE.PerspectiveCamera( 160, window.innerWidth / window.innerHeight, 50, 1000 );
				camera.position.z = 1000;
				scene.add( camera );


				// particles
				var map = THREE.ImageUtils.loadTexture( "flare.png" );

				attributes = {

					size: {	type: 'f', value: [] },
					customColor: { type: 'c', value: [] },
					time: { type: 'f', value: [] },

				};

				uniforms = {

					color:     { type: "c", value: new THREE.Color( 0xffffff ) },
					texture:   { type: "t", value: 0, texture: map },
					globalTime:		{ type: "f", value: 0.0 },

				};

				var shaderMaterial = new THREE.ShaderMaterial( {

					uniforms: 		uniforms,
					attributes:     attributes,
					vertexShader:   document.getElementById( 'vertexshader' ).textContent,
					fragmentShader: document.getElementById( 'fragmentshader' ).textContent,

					blending: 		THREE.AdditiveBlending,
					depthTest: 		false,
					transparent:	true,
					
				});


				var radius = 800;
				var geometry = new THREE.Geometry();

				for ( var i = 0; i < 50000; i++ ) {
					vector = getRandomPointOnSphere(radius);
					geometry.vertices.push( vector );
				}

				particles = new THREE.ParticleSystem( geometry, shaderMaterial );


				var vertices = particles.geometry.vertices;
				var values_size = attributes.size.value;
				var values_color = attributes.customColor.value;
				var values_time = attributes.time.value;

				for( var v = 0; v < vertices.length; v++ ) {
					values_color[ v ] = new THREE.Color( 0xffffff );
					values_color[ v ].setHSV( v/vertices.length, 0.5, 0.7 );
					values_time[ v ] = v/vertices.length;
				}

				scene.add( particles );


				try {
					// renderer
					renderer = new THREE.WebGLRenderer({antialias: false});
					renderer.setClearColorHex( 0x0a0a0a, 1 );
					renderer.setSize( window.innerWidth, window.innerHeight );
					renderer.autoClear = true;
					THREEx.WindowResize(renderer, camera);
				
					container.appendChild( renderer.domElement );
					has_gl = true;
				}
				catch (e) {
					// need webgl
					document.getElementById('info').innerHTML = "<P><BR><B>Note.</B> You need a modern browser that supports WebGL for this to run the way it is intended.<BR>For example. <a href='http://www.google.com/landing/chrome/beta/' target='_blank'>Google Chrome 9+</a> or <a href='http://www.mozilla.com/firefox/beta/' target='_blank'>Firefox 4+</a>.<BR><BR>If you are already using one of those browsers and still see this message, it's possible that you<BR>have old blacklisted GPU drivers. Try updating the drivers for your graphic card.<BR>Or try to set a '--ignore-gpu-blacklist' switch for the browser.</P><CENTER><BR><img src='../general/WebGL_logo.png' border='0'></CENTER>";
					document.getElementById('info').style.display = "block";
					return;
				}

			}

			function getRandomPointOnSphere(r) {
				var angle = Math.random() * Math.PI * 2;
				var u = Math.random() * 2 - 1;
			
				var v = new THREE.Vector3(
					Math.cos(angle) * Math.sqrt(1 - Math.pow(u, 2)) * r,
					Math.sin(angle) * Math.sqrt(1 - Math.pow(u, 2)) * r,
					u * r
				);
				return v;
			}

			function animate() {

				requestAnimationFrame( animate );

				render();
			
			}

			function render() {

				time = new Date().getTime();
				delta = time - oldTime;
				oldTime = time;

				if (isNaN(delta) || delta > 1000 || delta == 0 ) {
					delta = 1000/60;
				}

				uniforms.globalTime.value += delta * 0.0001;
				particles.rotation.z += 0.015;

				if (has_gl) {
					renderer.render( scene, camera );
				}

			}

		</script>
	</body>
</html>
